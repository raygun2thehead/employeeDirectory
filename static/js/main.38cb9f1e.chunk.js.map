{"version":3,"sources":["components/Table/index.js","components/SearchBox/index.js","components/Nav/index.js","components/SearchResults/index.js","App.js","reportWebVitals.js","index.js"],"names":["Table","items","config","React","useState","sortConfig","setSortConfig","useMemo","sortableItems","console","log","sort","a","b","key","direction","requestSort","useSortableData","results","getClassNamesFor","name","undefined","type","onClick","className","length","map","item","index","src","picture","thumbnail","alt","id","last","first","cell","email","location","city","state","colSpan","SearchBox","handleInputChange","htmlFor","onChange","e","placeholder","Navbar","SearchResults","props","event","target","value","filter","filteredList","Object","values","join","toLowerCase","indexOf","setState","filteredUsers","search","lastName","error","fetch","then","res","json","Nav","this","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38cb9f1e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst useSortableData = (items, config = null) => {\r\n  const [sortConfig, setSortConfig] = React.useState(config);\r\n\r\n  const sortedItems = React.useMemo(() => {\r\n    let sortableItems = [...items];\r\n    console.log(sortableItems)\r\n    if (sortConfig !== null) {\r\n      sortableItems.sort((a, b) => {\r\n        if (a[sortConfig.key] < b[sortConfig.key]) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1;\r\n        }\r\n        if (a[sortConfig.key] > b[sortConfig.key]) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    return sortableItems;\r\n  }, [items, sortConfig]);\r\n\r\n  const requestSort = (key) => {\r\n    let direction = 'ascending';\r\n    if (\r\n      sortConfig &&\r\n      sortConfig.key === key &&\r\n      sortConfig.direction === 'ascending'\r\n    ) {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return { items: sortedItems, requestSort, sortConfig };\r\n};\r\n\r\nconst Table = ({ results }) => {\r\n  const { items, requestSort, sortConfig } = useSortableData(results);\r\n  const getClassNamesFor = (name) => {\r\n    if (!sortConfig) {\r\n      return;\r\n    }\r\n    return sortConfig.key === name ? sortConfig.direction : undefined;\r\n  };\r\n\r\n  return (\r\n    <table>\r\n      <caption>EMPLOYEES</caption>\r\n      <thead>\r\n        <tr>\r\n          <th>Photo</th>\r\n          <th>\r\n            <button type=\"button\" \r\n            onClick={() => requestSort('name')}\r\n            className={getClassNamesFor('name')}            >\r\n              Last Name\r\n            </button></th>\r\n          <th>First Name</th>\r\n          <th>Cell</th>\r\n          <th>\r\n            <button type=\"button\" \r\n            onClick={() => requestSort('name')}\r\n            className={getClassNamesFor('name')}            >\r\n              Email\r\n            </button>\r\n          </th>\r\n          <th>Location</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {(items.length > 0) ? items.map((item, index) => {\r\n          return (\r\n            <tr key={index}>\r\n              <td><img src={item.picture.thumbnail} alt=\"\" /></td>\r\n              <td id=\"lastName\">{item.name.last}</td>\r\n              <td>{item.name.first}</td>\r\n              <td>{item.cell}</td>\r\n              <td>{item.email}</td>\r\n              <td>{item.location.city}, {item.location.state}</td>\r\n            </tr>\r\n          )\r\n        }) : <tr><td colSpan=\"5\">Loading...</td></tr>}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchBox({ handleInputChange }) {\r\n  return (\r\n    <div className=\"search\">\r\n      <form className=\"form-group\">\r\n        <label htmlFor=\"lastName\">Last Name:</label>\r\n        <input\r\n          // value={props.search}\r\n          onChange={e => handleInputChange (e)}\r\n          // name=\"lastName\"\r\n          // list=\"lastNames\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search employees by last\"\r\n          id=\"lastName\"\r\n        />\r\n        {/* <datalist id=\"lastNames\">\r\n          {props.lastNames.map(lastName => (\r\n            <option value={lastName} key={lastName} />\r\n          ))}\r\n        </datalist> */}\r\n        {/* <button type=\"submit\" onClick={e =>handleFormSubmit(e)} className=\"btn btn-success\">\r\n          Search\r\n        </button> */}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport SearchBox from \"../SearchBox\"\r\n\r\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\r\nfunction Navbar({ handleInputChange }) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        Employees\r\n      <div>\r\n        <SearchBox handleInputChange={handleInputChange}/>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n// import SearchBox from \"../SearchBox\";\r\nimport Table from \"../Table\"\r\nimport Navbar from \"../Nav\";\r\n// import Wrapper from \"./components/Wrapper\";\r\n\r\n\r\n\r\nclass SearchResults extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: \"\",\r\n      lastName: [],\r\n      results: [],\r\n      error: \"\"\r\n    };\r\n  }\r\n  // When the component mounts, get a list of all available base breeds and update this.state.breeds\r\n  componentDidMount() {\r\n    fetch(\"https://randomuser.me/api/?results=200&nat=us\")\r\n      .then(res => res.json())\r\n      .then(json => json.results)\r\n      .then(results => this.setState({ 'results': results }))\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    console.log(event.target.value) \r\n    const filter = event.target.value;\r\n    const filteredList = this.state.results.filter(item => {\r\n        let values = Object.values(item)\r\n            .join(\"\")\r\n            .toLowerCase();\r\n        return values.indexOf(filter.toLowerCase()) !== -1;\r\n    });\r\n    this.setState({ filteredUsers: filteredList });\r\n  }\r\n  //   handleFormSubmit = event => {\r\n  //     event.preventDefault();\r\n  //     fetch(\"https://randomuser.me/api/?results=200&nat=us\")\r\n  //     .then(res => {\r\n  //         if (res.data.status === \"error\") {\r\n  //           throw new Error(res.data.message);\r\n  //         }\r\n  //         this.setState({ results: res.data.message, error: \"\" });\r\n  //       })\r\n  //       .catch(err => this.setState({ error: err.message }));\r\n  //   };\r\n  render() {\r\n    return (\r\n      <>\r\n      <Navbar handleInputChange={this.handleInputChange} />\r\n      <div>\r\n        <Table results={this.state.results} />\r\n        {/* <ResultList employee={this.state.employee}/> */}\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n\r\n","import React from \"react\";\n// import Navbar from \"./components/Nav\";\n// import Wrapper from \"./components/Wrapper\";\nimport SearchResults from \"./components/SearchResults\"\n\nfunction App() {\n  return (\n      <div>\n        <SearchResults />\n      </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}